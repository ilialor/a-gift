import logging  
from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from app.dao.dao import UserDAO
from app.bot.keyboards.kbs import main_keyboard, record_keyboard
from app.dao.session_maker import connection 
from app.giftme.schemas import UserPydantic, ProfilePydantic, UserFilterPydantic

router = Router()


@router.message(CommandStart())
@connection()
async def cmd_start(message: Message, session, **kwargs):
    welcome_text = (
        "üéÆ Welcome to Giftme! üß©\n\n"
        "Here you can create your gift lists and share them!\n\n"
        "Let's start! üöÄ"
    )

    try:
        user_id = message.from_user.id
        logging.info(f"Received user_id: {user_id}")  
        filter_model = UserFilterPydantic(telegram_id=user_id)  
        logging.info(f"Filter model: {filter_model.model_dump()}")  
        user_info = await UserDAO.find_one_or_none(session=session, filters=filter_model)

        if not user_info:
            profile = ProfilePydantic(
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name
            )
            values = UserPydantic(
                telegram_id=user_id,
                username=message.from_user.username,
                profile=profile
            )
            logging.info(f"Creating new user with values: {values.model_dump()}") 
            await UserDAO.add(session=session, values=values)

        await message.answer(welcome_text, reply_markup=main_keyboard())

    except Exception as e:
        logging.error(f"Error in cmd_start: {e}")  
        await message.answer("Error. Please try again later.")



# @router.callback_query(F.data == 'show_my_record')
# @connection()
# async def get_user_rating(call: CallbackQuery, session, **kwargs):
#     await call.answer()

#     # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
#     await call.message.delete()

#     # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
#     record_info = await UserDAO.get_user_rank(session=session, telegram_id=call.from_user.id)
#     rank = record_info['rank']
#     best_score = record_info['best_score']

#     # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–Ω–≥–∞
#     if rank == 1:
#         text = (
#             f"ü•á –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –Ω–∞ –ø–µ—Ä–≤–æ–º –º–µ—Å—Ç–µ —Å —Ä–µ–∫–æ—Ä–¥–æ–º {best_score} –æ—á–∫–æ–≤! –í—ã ‚Äî —á–µ–º–ø–∏–æ–Ω!\n\n"
#             "–î–µ—Ä–∂–∏—Ç–µ –ø–ª–∞–Ω–∫—É –∏ –∑–∞—â–∏—â–∞–π—Ç–µ —Å–≤–æ–π —Ç–∏—Ç—É–ª. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –∏ "
#             "–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
#         )
#     elif rank == 2:
#         text = (
#             f"ü•à –í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! –í—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ –≤—Ç–æ—Ä–æ–µ –º–µ—Å—Ç–æ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º {best_score} –æ—á–∫–æ–≤!\n\n"
#             "–ï—â–µ –Ω–µ–º–Ω–æ–≥–æ ‚Äî –∏ –≤–µ—Ä—à–∏–Ω–∞ –≤–∞—à–∞! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–º!"
#         )
#     elif rank == 3:
#         text = (
#             f"ü•â –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í—ã –Ω–∞ —Ç—Ä–µ—Ç—å–µ–º –º–µ—Å—Ç–µ —Å {best_score} –æ—á–∫–∞–º–∏!\n\n"
#             "–ü–æ—á—Ç–∏ –≤–µ—Ä—à–∏–Ω–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≤–æ–∏ —Å–∏–ª—ã –µ—â–µ —Ä–∞–∑, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∏ –≤–æ–∑—å–º–∏—Ç–µ –∑–æ–ª–æ—Ç–æ!"
#         )
#     else:
#         text = (
#             f"üìä –í–∞—à —Ä–µ–∫–æ—Ä–¥: {best_score} –æ—á–∫–æ–≤. –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ {rank}-–æ–º –º–µ—Å—Ç–µ –≤ –æ–±—â–µ–º —Ä–µ–π—Ç–∏–Ω–≥–µ.\n\n"
#             "–° –∫–∞–∂–¥—ã–º —Ä–∞–∑–æ–º –≤—ã —Å—Ç–∞–Ω–æ–≤–∏—Ç–µ—Å—å –ª—É—á—à–µ! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å "
#             "–ø–æ–¥–Ω—è—Ç—å—Å—è –≤—ã—à–µ –∏ –ø–æ–±–∏—Ç—å —Å–≤–æ–π —Ä–µ–∫–æ—Ä–¥!"
#         )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    # await call.message.answer(text, reply_markup=record_keyboard())
